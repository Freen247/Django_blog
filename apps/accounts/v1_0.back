
# v1.0
# @login_required
# def users_view(request):
#     return render(request, 'user/users.html')


# @login_required
# def profile_view(request):
#     return render(request, 'user/account/profile.html')


# @login_required
# def change_profile_view(request):
#     if request.method == 'POST':
#         # 上传文件需要使用request.FILES
#         form = ProfileForm(request.POST, request.FILES, instance=request.user)
#         if form.is_valid():
#             form.save()
#             # 添加一条信息,表单验证成功就重定向到个人信息页面
#             messages.add_message(request, messages.SUCCESS, '个人信息更新成功！')
#             return redirect('accounts:profile')
#     else:
#         # 不是POST请求就返回空表单
#         form = ProfileForm(instance=request.user)
#     return render(request, 'user/account/change_profile.html', context={'form': form})


# @login_required
# def AdminView(request):
#     # if request.method == 'POST':
#     #     # 上传文件需要使用request.FILES
#     #     form = ProfileForm(request.POST,request.FILES,instance=request.user)
#     #     if form.is_valid():
#     #         form.save()
#     #         # 添加一条信息,表单验证成功就重定向到个人信息页面
#     #         messages.add_message(request,messages.SUCCESS,'个人信息更新成功！')
#     #         return redirect('accounts:profile')
#     # else:
#     #     # 不是POST请求就返回空表单
#     #     form = ProfileForm(instance=request.user)
#     return render(request, 'user/account/admin.html')


# # @csrf_exempt
# @require_POST
# def DelmemberView(request):
#     '''将一个member删除'''
#     if request.is_ajax():
#         data = request.POST
#         # if (data):
#         #     JsonResponse({'msg': 'good'})
#         member_id = data.get('member_id')
#         contact_id = data.get('contact_id')
#         # JsonResponse({'msg': 'good'})
#         member = get_object_or_404(Ouser, id=member_id)
#         cont = get_object_or_404(Contacts, id=contact_id)
#         # 获取当前通讯录下所有的用户列表
#         member.contact.remove(cont)
#         # info.delete()
#         # if (info):
#         # return JsonResponse({'msg': })
#         # else :
#         #     return JsonResponse({'msg': 'delete success'})

#     return JsonResponse({'msg': contact_id})


# @require_POST
# def AddmemberView(request):
#     '''增加member'''
#     if request.is_ajax():
#         data = request.POST
#         # if (data):
#         #     JsonResponse({'msg': 'good'})
#         member_id = data.get('member_id')
#         contact_id = data.get('contact_id')
#         # JsonResponse({'msg': 'good'})
#         member = get_object_or_404(Ouser, id=member_id)
#         cont = get_object_or_404(Contacts, id=contact_id)
#         member.contact.add(cont)
#         # info.delete()
#         # if (info):
#         #     return JsonResponse({'msg': })
#         # else :
#         #     return JsonResponse({'msg': 'delete success'})

#     return JsonResponse({'msg': "good"})


# @require_POST
# def SearchmemberView(request):
#     '''搜索member'''
#     if request.is_ajax():
#         data = request.POST
#         member_id = data.get('member_id')
#         member_name = data.get('member_name')

#         if (get_object_or_404(Ouser, id=member_id).username == member_name):
#             return JsonResponse({'msg': member_id})
#         else:
#             return JsonResponse({'msg': 'nobody'})


# class ContactsView(generic.ListView):
#     model = Ouser
#     template_name = 'user/contacts.html'
#     context_object_name = 'members'
#     paginate_by = getattr(settings, 'BASE_PAGE_BY', None)
#     paginate_orphans = getattr(settings, 'BASE_ORPHANS', 0)

#     def get_queryset(self, **kwargs):
#         queryset = super(ContactsView, self).get_queryset()
#         contacts = get_object_or_404(Contacts, slug=self.kwargs.get('slug'))
#         return queryset.filter(contact=contacts)

#     def get_context_data(self, **kwargs):
#         context_data = super(ContactsView, self).get_context_data()
#         contacts = get_object_or_404(Contacts, slug=self.kwargs.get('slug'))
#         context_data['search_contacts'] = '通讯录'
#         context_data['search_instance'] = contacts
#         return context_data


# # import markdown
# import time
# from django.views import generic
# from django.conf import settings
# from django.utils.text import slugify
# from django.shortcuts import render, HttpResponse, render_to_response
# from django.views.decorators.csrf import csrf_exempt
# from django.shortcuts import get_object_or_404, get_list_or_404

# from .models import Article, Category, Timeline
# import markdown
# import emoji
# import re
# from markdown.extensions.toc import TocExtension

# # from django.views import View





# class TimelineView(generic.ListView):
#     model = Timeline
#     template_name = 'blog/timeline.html'
#     context_object_name = 'timeline_list'


# class DetailView(generic.DetailView):
#     model = Article
#     template_name = 'blog/article.html'
#     context_object_name = 'article'

#     def get_object(self):
#         obj = super(DetailView, self).get_object()
#         # 设置浏览量增加时间判断,同一篇文章两次浏览超过半小时才重新统计阅览量,作者浏览忽略
#         u = self.request.user
#         ses = self.request.session
#         the_key = 'is_read_{}'.format(obj.id)
#         is_read_time = ses.get(the_key)
#         if u != obj.author:
#             if not is_read_time:
#                 obj.update_views()
#                 ses[the_key] = time.time()
#             else:
#                 now_time = time.time()
#                 t = now_time - is_read_time
#                 if t > 60 * 10:
#                     obj.update_views()
#                     ses[the_key] = time.time()
#         obj.update_views()
#         ses[the_key] = time.time()
#         # 文章可以使用markdown书写，带格式的文章，像csdn写markdown文章一样
#         md = markdown.Markdown(extensions=[
#             'markdown.extensions.extra',
#             'markdown.extensions.codehilite',
#             TocExtension(slugify=slugify),
#         ])
#         obj.body = md.convert(obj.body)
#         obj.toc = md.toc
#         m = re.search(
#             r'<div class="toc">\s*<ul>(.*)</ul>\s*</div>', md.toc, re.S)
#         obj.toc = m.group(1) if m is not None else ''

#         return obj


# class CategoryView(generic.ListView):
#     model = Article
#     template_name = 'blog/category.html'
#     context_object_name = 'articles'
#     paginate_by = getattr(settings, 'BASE_PAGE_BY', None)
#     paginate_orphans = getattr(settings, 'BASE_ORPHANS', 0)

#     def get_ordering(self):
#         ordering = super(CategoryView, self).get_ordering()
#         sort = self.kwargs.get('sort')
#         if sort == 'v':
#             return ('-views', '-update_date', '-id')
#         return ordering

#     def get_queryset(self, **kwargs):
#         queryset = super(CategoryView, self).get_queryset()
#         cate = get_object_or_404(Category, slug=self.kwargs.get('slug'))
#         return queryset.filter(category=cate)

#     def get_context_data(self, **kwargs):
#         context_data = super(CategoryView, self).get_context_data()
#         cate = get_object_or_404(Category, slug=self.kwargs.get('slug'))
#         context_data['search_tag'] = '文章分类'
#         context_data['search_instance'] = cate
#         return context_data

